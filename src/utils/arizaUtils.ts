// ArÄ±za tipine gÃ¶re ikon dÃ¶ndÃ¼ren fonksiyon
export const getArizaIcon = (tip: string) => {
  switch (tip?.toLowerCase()) {
    case "su":
      return "ğŸ’§";
    case "elektrik":
      return "âš¡";
    case "Ä±sÄ±tma":
      return "ğŸ”¥";
    case "kapÄ±":
      return "ğŸšª";
    case "asansÃ¶r":
      return "ğŸ”¼";
    default:
      return "ğŸ”§";
  }
};

// Durum badge'i iÃ§in renk dÃ¶ndÃ¼ren fonksiyon
export const getDurumBadgeVariant = (durum: string) => {
  switch(durum) {
    case "Talep AlÄ±ndÄ±": return "secondary";
    case "Randevu PlanlandÄ±": return "warning";
    case "Randevu Yeniden PlanlandÄ±": return "warning";
    case "KÄ±smÄ± Ã‡Ã¶zÃ¼m": return "default";
    case "Ã‡Ã¶zÃ¼m": return "success";
    case "Ä°ptal Edildi": return "destructive";
    default: return "secondary";
  }
};

// ArÄ±za toplam masrafÄ±nÄ± hesapla
export const hesaplaArizaMasrafi = (ariza: any): number => {
  if (!ariza.randevular || ariza.randevular.length === 0) return 0;
  
  let toplamMasraf = 0;
  
  ariza.randevular.forEach((randevu: any) => {
    if (randevu.kullanilanMalzemeler && randevu.kullanilanMalzemeler.length > 0) {
      randevu.kullanilanMalzemeler.forEach((malzeme: any) => {
        toplamMasraf += malzeme.miktar * (malzeme.fiyat || 0);
      });
    }
  });
  
  return toplamMasraf;
};

// Veri getirme fonksiyonu
export const fetcher = async (url: string) => {
  const res = await fetch(url);
  if (!res.ok) {
    throw new Error("Veri Ã§ekerken bir hata oluÅŸtu");
  }
  return res.json();
}; 